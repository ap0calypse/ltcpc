#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Curses::UI;
use JSON;
use LWP::UserAgent;
use lib './conf/';
use ltcpcconf;

my %CONFIG = %ltcpcconf::CONFIG;
my %M2W = %ltcpcconf::M2W;

sub usage {
    print "Please specify the correct parameters in ./conf/ltcpcconf.pm!\n\n";
}

unless (scalar @{$CONFIG{'API_KEYS'}}) {
    &usage() and exit();
}

sub calc_profitability {
    my $miner = shift;
    my $rate = shift;
    my $ratio = 0;
    $ratio = sprintf("%.2f", ($rate / 1000) / $M2W{$miner});
    return $ratio;
}

my $cui = Curses::UI->new( -color_support => 1, -clear_on_exit => 1 );

sub exit_dialog {
    exit(0);
}

my $win_main = $cui->add(
        'win_main', 'Window',
        -border => 1,
        -y    => 0,
        -bfg  => 'white',
        -title => 'ltcpc - a litecoinpool.org CLI - have fun :)'
);
my $textview = $win_main->add(
        'textview', 'TextViewer',
        -vscrollbar => 0, -wrapping => 0, -pad => 1,
        );

my $DISP_TEXT = "";
my $DATA;
my $STATS;

sub get_stats {
    for my $KEY (@{$CONFIG{'API_KEYS'}}) {
        my $URL = "https://litecoinpool.org/api?api_key=" . $KEY;
        my $ua = LWP::UserAgent->new(ssl_opts => {verify_hostname => 0});
        my $js = JSON->new->allow_nonref;
        my $resp = $ua->get($URL);
        if ($resp->is_success()) {
            my $data = $js->decode($resp->decoded_content());
            for my $w_name (keys %{$data->{'workers'}}) {
                $DATA->{$KEY}{$w_name}{'hash_rate'} = $data->{'workers'}{$w_name}{'hash_rate'};
                $DATA->{$KEY}{$w_name}{'hash_rate_24h'} = $data->{'workers'}{$w_name}{'hash_rate_24h'};
                $DATA->{$KEY}{$w_name}{'rewards'} = $data->{'workers'}{$w_name}{'rewards'};
                $DATA->{$KEY}{$w_name}{'connected'} = $data->{'workers'}{$w_name}{'connected'};
            }
            $STATS->{$KEY}{'paid_rewards'} = $data->{'user'}{'paid_rewards'};
            $STATS->{$KEY}{'unpaid_rewards'} = $data->{'user'}{'unpaid_rewards'};
            $STATS->{$KEY}{'past_24h_rewards'} = $data->{'user'}{'past_24h_rewards'};
            $STATS->{'GLOBAL'}{'network_diff'} = $data->{'network'}{'difficulty'};
            $STATS->{'GLOBAL'}{'pps_ratio'} = $data->{'pool'}{'pps_ratio'};
            $STATS->{'GLOBAL'}{'ltc_eur'} = $data->{'market'}{'ltc_eur'};
            my $power_costs = $CONFIG{'PRICE_KWH'};
            $win_main->title("ltcpc > " . $data->{'market'}{'ltc_eur'} . 
            " EUR" . " > " . 
            sprintf("%.2f/%.2f TH/s", 
                $data->{'pool'}{'hash_rate'}/1000000000, 
                $data->{'network'}{'hash_rate'}/1000000000
            ) . " > PPS " . $STATS->{'GLOBAL'}{'pps_ratio'} . " > D " . 
            sprintf("%.2fM", $STATS->{'GLOBAL'}{'network_diff'} / 1000000) . " > $power_costs EUR/kWh");

        }
    }
}

sub get_24h_profit {
    my $hashrate = shift;
    my $watts = shift;
    my $power_costs = $CONFIG{'PRICE_KWH'};
    my $reward = sprintf("%.2f", 
    ((12.5 * $STATS->{'GLOBAL'}{'pps_ratio'}) / ($STATS->{'GLOBAL'}{'network_diff'} * 2 ** 32)) * $hashrate * 1000 * 60 * 60 * 24 * $STATS->{'GLOBAL'}{'ltc_eur'});
    my $costs = $power_costs * ($watts/1000) * 24;
    return($reward, $costs);
}

sub display_stats {
    $DISP_TEXT = sprintf("%-18s | %8s | %8s | %12s | %4s | %10s\n", 
    "Miner Name", "MH/s", "24h MH/s", "REWARDS", "MH/W", "24h PROFIT");
    for my $KEY (sort keys %{$DATA}) {
        $DISP_TEXT .= "--" x 38;
        $DISP_TEXT .= "\n";
        my $total_hashrate = 0;
        my $total_power = 0;
        my $total_profit = 0;
        my $effective_ratio = 0;
        for my $w (sort keys %{$DATA->{$KEY}}) {
            if ($DATA->{$KEY}{$w}{'hash_rate'} > 0) {
                my ($reward, $costs) = &get_24h_profit($DATA->{$KEY}{$w}{'hash_rate'}, $M2W{$w});

                $DISP_TEXT .= sprintf("%-18s | %8.2f | %8.2f | %12.8f | %4.2f | %+5.2f EUR\n", 
                    $w, $DATA->{$KEY}{$w}{'hash_rate'}/1000, $DATA->{$KEY}{$w}{'hash_rate_24h'}/1000,
                    $DATA->{$KEY}{$w}{'rewards'}, 
                    &calc_profitability($w, $DATA->{$KEY}{$w}{'hash_rate'}), $reward-$costs
                );
                $total_profit += $reward-$costs;
                $total_hashrate += $DATA->{$KEY}{$w}{'hash_rate'};
                $total_power += $M2W{$w};
            }
        }
        $effective_ratio = sprintf("%.2f" , ($total_hashrate / 1000) / $total_power);
        my ($reward_total, $costs_total) = &get_24h_profit($total_hashrate, $total_power);
        $DISP_TEXT .= sprintf("%-18s | %8.2f | %6d W | %12s | %4.2f | %+5.2f EUR\n\n", 
        "TOTAL", $total_hashrate / 1000, $total_power, "", $effective_ratio, $total_profit);
        $DISP_TEXT .= sprintf("%-18s | %-.8f / %-.8f LTC\n", "PAID / UNPAID", $STATS->{$KEY}{'paid_rewards'}, $STATS->{$KEY}{'unpaid_rewards'});
        $DISP_TEXT .= sprintf("%-18s | %-.8f LTC (~%.2f EUR) / %.2f kWh (~%.2f EUR)\n", "REWARD / COST 24h", 
        ((12.5 * $STATS->{'GLOBAL'}{'pps_ratio'}) / ($STATS->{'GLOBAL'}{'network_diff'} * 2 ** 32)) * $total_hashrate * 1000 * 60 * 60 * 24, $reward_total, $total_power/1000*24, $costs_total);
    }

    $textview->text($DISP_TEXT);
    $textview->intellidraw();
    $win_main->intellidraw();
    $textview->focus();

}
$SIG{ALRM} = sub {
    my $alarm_val = $CONFIG{'REFRESH'} || 30;
    &get_stats();
    &display_stats();
    alarm($alarm_val);
};
$textview->focus();
$cui->set_binding( \&exit_dialog , "\cQ");
alarm(1);
$cui->mainloop();
